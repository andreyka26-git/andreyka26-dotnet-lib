services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: observability-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: events_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - observability-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        tag: "postgres|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: observability-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "prometheus|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: observability-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./observability/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "alertmanager|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: observability-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "node-exporter|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: observability-cadvisor
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "cadvisor|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: observability-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/events_db?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "postgres-exporter|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loki:
    image: grafana/loki:3.0.0
    container_name: observability-loki
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-local-config.yaml
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "loki|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  promtail:
    image: grafana/promtail:3.0.0
    container_name: observability-promtail
    volumes:
      - ./observability/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "promtail|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: grafana/grafana:11.1.0
    container_name: observability-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    networks:
      - observability-network
    logging:
      driver: "json-file"
      options:
        tag: "grafana|{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  observability-network:
    driver: bridge
